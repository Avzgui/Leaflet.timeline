{"name":"Leaflet.timeline","tagline":"Display arbitrary GeoJSON on a map with a timeline slider and play button","body":"# Leaflet.timeline 0.4.0\r\n\r\nShow any changing geospatial data over time, from points to polygons.\r\n\r\nIf you want smooth motion of markers from point to point, this is not your\r\nplugin. Please check out [LeafletPlayback][], or for real-time data, try\r\n[Leaflet Realtime][], both plugins from which I may or may not have pilfered\r\nsome ideas.\r\n\r\n\r\n## Examples\r\n\r\n### [Earthquakes][1]\r\n\r\nUSGS provides [GeoJSON(P) files][2] with earthquake data, including time and\r\nmagnitude. For this example, that data is read, parsed to the right format\r\n(`start` and `end` values in the GeoJSON `properties`), and added to a\r\n`Leaflet.timeline`.\r\n\r\n### [Country borders after WWII][3]\r\n\r\nI found some historical country border data [here][4], though unfortunately\r\nit was not in GeoJSON. I converted it with [ogr2ogr][5]:\r\n\r\n    $ ogr2ogr -f \"GeoJSON\" \\\r\n      -select CNTRY_NAME,COWSYEAR,COWSMONTH,COWSDAY,COWEYEAR,COWEMONTH,COWEDAY \\\r\n      borders.json cshapes.shp\r\n\r\nthen wrangled the data into the right format (examples/borders-parse.js). After\r\nthat, it was just a matter of passing the data to `Leaflet.timeline` and letting\r\nit handle everything.\r\n\r\n## Usage\r\n\r\n`Leaflet.timeline` is a subclass of `L.GeoJSON`, so use it as you would that.\r\nThe data you pass in should be something like this:\r\n\r\n``` json\r\n{\r\n  \"type\": \"FeatureCollection\",\r\n  \"features\": [\r\n    {\r\n      \"type\": \"Feature\",\r\n      \"properties\": {\r\n        \"start\": \"1970-01-01\",\r\n        \"end\": \"2014-12-04\"\r\n      },\r\n      \"geometry\": { ... }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThe date can really be anything `Date()` can process.\r\n\r\nIt does add some extra options:\r\n\r\n## Options\r\n\r\nsee also [all GeoJSON's options](http://leafletjs.com/reference.html#geojson)\r\n\r\n#### `start`\r\n*default: earliest `start` in GeoJSON*\r\n\r\nThe beginning/minimum value of the timeline.\r\n\r\n#### `end`\r\n*default: latest `end` in GeoJSON*\r\n\r\nThe end/maximum value of the timeline.\r\n\r\n#### `position`\r\n*default: bottomleft*\r\n\r\n[Position](http://leafletjs.com/reference.html#control) for the timeline\r\ncontrols. Probably doesn't really matter as you'll likely want to expand them\r\nanyway.\r\n\r\n#### `formatDate`\r\n*default: `(date) -> \"\"`*\r\n\r\nA function that takes in a Unix timestamp and outputs a string. Ideally for\r\nformatting the timestamp, but hey, you can do whatever you want.\r\n\r\n#### `enablePlayback`\r\n*default: `true`*\r\n\r\nShow playback controls (i.e. prev/play/pause/next).\r\n\r\n#### `steps`\r\n*default: 1000*\r\n\r\nHow many steps to break the timeline into. Each step will then be `(end-start) /\r\nsteps`. Only affects playback.\r\n\r\n#### `duration`\r\n*default: 10000*\r\n\r\nMinimum time, in ms, for the playback to take. Will almost certainly actually\r\ntake at least a bit longer -- after each frame, the next one displays in\r\n`duration/steps` ms, so each frame really takes frame processing time PLUS\r\nstep time.\r\n\r\n#### `showTicks`\r\n*default: true*\r\n\r\nShow tick marks on slider, representing changes in value(s).\r\n\r\n#### `waitToUpdateMap`\r\n*default: false*\r\n\r\nWait until the user is finished changing the date to update the map. By default,\r\nboth the map and the date update for every change. With complex data, this can\r\nslow things down, so set this to true to only update the displayed date.\r\n\r\n#### `intervalFromFeature`\r\n\r\nA function that should, given a feature, return an object with `start` and `end`\r\nproperties, representing the start time and end time of the feature. By default\r\nit will use `feature.properties.start` and `feature.properties.end`.\r\n\r\n## Events\r\n\r\n#### `change`\r\nFired when the selected time changes (either through manually sliding or\r\nthrough playback).\r\n\r\n## Methods\r\n\r\n#### `setTime`\r\nSets the current timeline time. Will parse any dates in just about any format\r\nyou throw at it.\r\n\r\n#### `getDisplayed`\r\nReturns the original GeoJSON of the features that are currently being displayed\r\non the map.\r\n\r\n## Change log\r\n\r\n### 0.4.0\r\n- Fixed an issue where too wide of a range of dates would case playback to go\r\n  backwards\r\n- Added options to pass in methods to handle the data, so you can use a different\r\n  format if you want\r\n- Added a grunt build pipeline (thanks to @vencax for this and the two changes above)\r\n- Fixed a bug where next/previous buttons wouldn't work as expected if input\r\n  wasn't sorted (.. by sorting the input)\r\n\r\n\r\n### 0.3.0\r\n- Fixed Pause button not turning back into Play button on playback completion\r\n- Fixed clicks on control buttons zooming map\r\n- Fixed `getDisplayed` and event timing\r\n- Major performance improvements\r\n- Add `waitToUpdateMap` option to allow dragging the slider without updating\r\n  the map until user is done\r\n\r\n### 0.2.0\r\n- Added previous/next/pause\r\n- Change behavior of play button (will play from wherever it is rather than\r\n  reset to the beginning)\r\n- Lots of code restructuring\r\n- Add more extensive default styling, using Sass\r\n\r\n### 0.1.0\r\n- It kinda works?\r\n\r\n[Leaflet Realtime]: https://github.com/perliedman/leaflet-realtime\r\n[LeafletPlayback]: https://github.com/hallahan/LeafletPlayback\r\n[1]: http://skeate.github.io/Leaflet.timeline/earthquakes.html\r\n[2]: http://earthquake.usgs.gov/earthquakes/feed/v1.0/geojson.php\r\n[3]: http://skeate.github.io/Leaflet.timeline/borders.html\r\n[4]: http://nils.weidmann.ws/projects/cshapes\r\n[5]: http://www.gdal.org/ogr2ogr.html\r\n","google":"UA-54709915-2","note":"Don't delete this file! It's used internally to help with page regeneration."}